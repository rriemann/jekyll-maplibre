<script src="/assets/maps/maplibre-gl.js"></script>
<% if context.registers[:site].config.dig("maplibre","pmtiles") %>
<script src="/assets/maps/pmtiles.js"></script>
<script type="text/javascript">
  // add the PMTiles plugin to the maplibregl global.
  let protocol = new pmtiles.Protocol();
  maplibregl.addProtocol("pmtiles",protocol.tile);
</script>
<% end %>
<div <%= attributes(context) %>></div>

<script type="text/javascript">
  (async () => {
    const map = new maplibregl.Map({
      container: '<%= @options[:attributes][:id] %>',
      zoom: <%= zoom %>,
      center: <%= center(context).to_json %>,
      style: <%= style(context) %>,
    });
    // map.showTileBoundaries = true;
    
    // Add zoom and rotation controls to the map.
    map.addControl(new maplibregl.NavigationControl());
    
    <% if geojson(context) %>
    map.on('load', () => {
        // Add a new source from our GeoJSON data and
        // set the 'cluster' option to true. GL-JS will
        // add the point_count property to your source data.
        map.addSource('jekyll-data', {
            type: 'geojson',
            data: <%= geojson(context).to_json %>,
            cluster: <%= (!@options[:flags][:no_cluster]).to_s %>,
            clusterMaxZoom: 14, // Max zoom to cluster points on
            clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
        });

        map.addLayer({
            id: 'clusters',
            type: 'circle',
            source: 'jekyll-data',
            filter: ['has', 'point_count'],
            paint: {
                // Use step expressions (https://maplibre.org/maplibre-style-spec/#expressions-step)
                // with three steps to implement three types of circles:
                //   * Blue, 20px circles when point count is less than 100
                //   * Yellow, 30px circles when point count is between 100 and 750
                //   * Pink, 40px circles when point count is greater than or equal to 750
                'circle-color': [
                    'step',
                    ['get', 'point_count'],
                    '#51bbd6',
                    100,
                    '#f1f075',
                    750,
                    '#f28cb1'
                ],
                'circle-radius': [
                    'step',
                    ['get', 'point_count'],
                    20,
                    100,
                    30,
                    750,
                    40
                ]
            }
        });

        map.addLayer({
            id: 'cluster-count',
            type: 'symbol',
            source: 'jekyll-data',
            filter: ['has', 'point_count'],
            layout: {
                'text-field': '{point_count_abbreviated}',
                'text-font': ['Roboto Regular'],
                'text-size': 12
            }
        });

        map.addLayer({
            id: 'unclustered-point',
            type: 'symbol',
            source: 'jekyll-data',
            filter: ['!', ['has', 'point_count']],
            layout: {
              "icon-image": "marker",
              "icon-size": 2,
              "icon-anchor": "bottom",
            }
        });

        // inspect a cluster on click
        map.on('click', 'clusters', (e) => {
            const features = map.queryRenderedFeatures(e.point, {
                layers: ['clusters']
            });
            const clusterId = features[0].properties.cluster_id;
            map.getSource('jekyll-data').getClusterExpansionZoom(
                clusterId,
                (err, zoom) => {
                    if (err) return;

                    map.easeTo({
                        center: features[0].geometry.coordinates,
                        zoom
                    });
                }
            );
        });

        // When a click event occurs on a feature in
        // the unclustered-point layer, open a popup at
        // the location of the feature, with
        // description HTML from its properties.
        map.on('click', 'unclustered-point', (e) => {
          if(!e.features[0].properties.description) return;
          const coordinates = e.features[0].geometry.coordinates.slice();

          // Ensure that if the map is zoomed out such that
          // multiple copies of the feature are visible, the
          // popup appears over the copy being pointed to.
          while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
          }

          new maplibregl.Popup({offset: [0, -35]})
            .setLngLat(coordinates)
            .setHTML(e.features[0].properties.description)
            .addTo(map);
        });

        map.on('mouseenter', 'unclustered-point', () => {
          if(!e.features[0].properties.description) return;
          map.getCanvas().style.cursor = 'pointer';
        });
        map.on('mouseleave', 'unclustered-point', () => {
          map.getCanvas().style.cursor = '';
        });

        map.on('mouseenter', 'clusters', () => {
            map.getCanvas().style.cursor = 'pointer';
        });
        map.on('mouseleave', 'clusters', () => {
            map.getCanvas().style.cursor = '';
        });
    });
    <% end %>
  })();
</script>
